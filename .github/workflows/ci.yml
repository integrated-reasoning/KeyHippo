name: "ci"

on:
  push:
    paths-ignore:
      - "**.md"
    branches:
      - main
  pull_request:
    types: [opened, synchronize]

env:
  NODE_ENV: development

permissions:
  contents: read
  issues: write
  pull-requests: write
  checks: write
  statuses: write

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Docker images.
        uses: ScribeMD/docker-cache@0.5.0
        with:
          key: docker-${{ runner.os }}-${{ hashFiles('./client/pnpm-lock.yaml') }}

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase
        working-directory: ./client
        run: |
          supabase start
          eval "$(supabase status -o env)"
          echo "SUPABASE_URL=${API_URL}" >> "$GITHUB_ENV"
          echo "SUPABASE_ANON_KEY=${ANON_KEY}" >> "$GITHUB_ENV"

      - name: Install dbdev
        working-directory: ./client
        run: |
          cat << EOF > setup_commands.sql
          create extension if not exists http with schema extensions;
          create extension if not exists pg_tle;
          drop extension if exists "supabase-dbdev";
          select pgtle.uninstall_extension_if_exists('supabase-dbdev');
          select
              pgtle.install_extension(
                  'supabase-dbdev',
                  resp.contents ->> 'version',
                  'PostgreSQL package manager',
                  resp.contents ->> 'sql'
              )
          from http(
              (
                  'GET',
                  'https://api.database.dev/rest/v1/'
                  || 'package_versions?select=sql,version'
                  || '&package_name=eq.supabase-dbdev'
                  || '&order=version.desc'
                  || '&limit=1',
                  array[
                      ('apiKey', '${{ secrets.DBDEV_ANON_API_KEY }}')::http_header
                  ],
                  null,
                  null
              )
          ) x,
          lateral (
              select
                  ((row_to_json(x) -> 'content') #>> '{}')::json -> 0
          ) resp(contents);
          create extension "supabase-dbdev";
          select dbdev.install('supabase-dbdev');
          drop extension if exists "supabase-dbdev";
          create extension "supabase-dbdev";
          EOF

          PGPASSWORD=postgres psql -h localhost -p 54322 -U postgres -d postgres -f setup_commands.sql

      - name: Install keyhippo
        working-directory: ./client
        run: |
          cat << EOF > setup_commands.sql
          select dbdev.install('keyhippo@keyhippo');
          create extension "keyhippo@keyhippo" version '0.0.12';
          EOF

          PGPASSWORD=postgres psql -h localhost -p 54322 -U postgres -d postgres -f setup_commands.sql

      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - uses: actions/cache@main
        with:
          path: |
            ~/.npm
            ~/.pnpm-store
            ./client/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/pnpm-lock.yaml') }}
      - name: Install dependencies
        working-directory: ./client
        run: nix develop --command make install
      - name: Build project
        working-directory: ./client
        run: nix develop --command make build
      - name: Run tests
        working-directory: ./client
        run: nix develop --command make test
      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: client/coverage
          fail_ci_if_error: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  build:
    if: false
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@main
      - uses: DeterminateSystems/nix-installer-action@main
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
      - uses: actions/cache@main
        with:
          path: |
            ~/.npm
            ~/.pnpm-store
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/pnpm-lock.yaml') }}
      - name: Install dependencies
        run: nix develop --command make install
      - name: Build project
        run: nix develop --command make build
      - name: Run tests
        run: nix develop --command make test

  lint:
    if: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.pnpm-store
            node_modules
          key: ${{ runner.os }}-node-lint-${{ hashFiles('**/pnpm-lock.yaml') }}
      - name: Install dependencies
        run: nix develop --command make install
      - name: Check formatting
        run: nix develop --command pnpm prettier --check .
